/* ConciseLang.java */
/* Generated By:JavaCC: Do not edit this line. ConciseLang.java */
package concise.lang;

import java.util.HashMap;
import java.util.Map;

public class ConciseLang implements ConciseLangConstants {
  public static void main(String args []) throws ParseException
  {
    while (true)
    {
      ConciseLang parser = new ConciseLang(System.in);
      try
      {
        parser.Start();
      }
      catch (ParseException e)
      {
        System.out.println("Syntax error: " +e.getMessage());
        parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Error: " + e.getMessage());
        break;
      }
    }
  }

  final public void Start() throws ParseException {Map<String, Integer> varMap = new HashMap<>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TERNARY:
      case STR:
      case DISPLAY:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        DeclareOrAssign(varMap);
        break;
        }
      case DISPLAY:{
        Print(varMap);
        break;
        }
      case TERNARY:{
        TernaryInt(varMap);
        break;
        }
      case STR:{
        TernaryStr(varMap);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
}

  final public void DeclareOrAssign(Map<String, Integer> varMap) throws ParseException {Token t; int varValue = 0;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TERNARY:
    case TRUE:
    case FALSE:
    case INTEGER:
    case IDENTIFIER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TERNARY:{
        varValue = TernaryInt(varMap);
        break;
        }
      case TRUE:
      case FALSE:
      case INTEGER:
      case IDENTIFIER:{
        varValue = ArithExpr(varMap);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
varMap.put(t.image,varValue);
    jj_consume_token(DELIMITER);
}

  final public void Print(Map<String, Integer> varMap) throws ParseException {Token t; int val = 0; String str;
    jj_consume_token(DISPLAY);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      t = jj_consume_token(STRING_LITERAL);
System.out.println(t.image.substring(1, t.image.length() - 1));
      break;
      }
    case TRUE:
    case FALSE:
    case INTEGER:
    case IDENTIFIER:{
      val = ArithExpr(varMap);
System.out.println(val);
      break;
      }
    case TERNARY:{
      val = TernaryInt(varMap);
System.out.println(val);
      break;
      }
    case STR:{
      str = TernaryStr(varMap);
System.out.print(str.substring(1, str.length() - 1));
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DELIMITER);
}

  final public String TernaryStr(Map<String, Integer> varMap) throws ParseException {boolean cond = false; Token str1, str2;
    jj_consume_token(STR);
    jj_consume_token(TERNARY);
    jj_consume_token(LCB);
    cond = BoolExpr(varMap);
    jj_consume_token(RCB);
    jj_consume_token(COND);
    str1 = jj_consume_token(STRING_LITERAL);
    jj_consume_token(ELSE);
    str2 = jj_consume_token(STRING_LITERAL);
{if ("" != null) return (cond)? str1.image: str2.image;}
    throw new Error("Missing return statement in function");
}

  final public int TernaryInt(Map<String, Integer> varMap) throws ParseException {boolean cond = false; int val1, val2;
    jj_consume_token(TERNARY);
    jj_consume_token(LCB);
    cond = BoolExpr(varMap);
    jj_consume_token(RCB);
    jj_consume_token(COND);
    val1 = ArithExpr(varMap);
    jj_consume_token(ELSE);
    val2 = ArithExpr(varMap);
{if ("" != null) return (cond)? val1: val2;}
    throw new Error("Missing return statement in function");
}

  final public boolean BoolExpr(Map<String, Integer> varMap) throws ParseException {int a, b;
    a = ArithExpr(varMap);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:
      case NOT_EQUAL:{
        ;
        break;
        }
      default:
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        jj_consume_token(EQUAL);
        b = ArithExpr(varMap);
{if ("" != null) return (a == b)? true: false;}
        break;
        }
      case NOT_EQUAL:{
        jj_consume_token(NOT_EQUAL);
        b = ArithExpr(varMap);
{if ("" != null) return (a != b)? true: false;}
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return (a > 0)? true : false;}
    throw new Error("Missing return statement in function");
}

  final public int ArithExpr(Map<String, Integer> varMap) throws ParseException {int a, b;
    a = ExprTerm(varMap);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        b = ExprTerm(varMap);
a +=b;
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        b = ExprTerm(varMap);
a -= b;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

  final public int ExprTerm(Map<String, Integer> varMap) throws ParseException {int a, b;
    a = Operand(varMap);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:
      case DIVIDE:
      case MODULUS:{
        ;
        break;
        }
      default:
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:{
        jj_consume_token(MULTI);
        b = Operand(varMap);
a *=b;
        break;
        }
      case DIVIDE:{
        jj_consume_token(DIVIDE);
        b = Operand(varMap);
a /= b;
        break;
        }
      case MODULUS:{
        jj_consume_token(MODULUS);
        b = Operand(varMap);
a %= b;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

  final public int Operand(Map<String, Integer> varMap) throws ParseException {Token t; int val = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
if(varMap.containsKey(t.image)) { val =  varMap.get(t.image); }
      break;
      }
    case INTEGER:{
      val = Int();
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
val = 1;
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
val = 0;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return val;}
    throw new Error("Missing return statement in function");
}

  final public int Int() throws ParseException {Token t;
    t = jj_consume_token(INTEGER);
{if ("" != null) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public ConciseLangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public ConciseLang(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConciseLang(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ConciseLangTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Constructor. */
  public ConciseLang(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ConciseLangTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ConciseLangTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConciseLang(ConciseLangTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConciseLangTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   return token;
	 }
	 token = oldToken;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 Token errortok = token.next;
	 int line = errortok.beginLine, column = errortok.beginColumn;
	 String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
	 return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
